/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VntLibreria;

import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.sql.Blob;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import recursos.Mensaje;

/**
 *
 * @author HP
 */
public class VtnConsultaPersonalizadaLibros extends javax.swing.JFrame
{

    /**
     * Creates new form VtnConsultarLibros
     */
    int X_V;
    int Y_V;
    String pantallas_Usuario = "";
    String nombre_Final_de_Usuario = "";

    public VtnConsultaPersonalizadaLibros(String pantallas_Usuario, String nombre_Final_de_Usuario)
    {
        this.pantallas_Usuario = pantallas_Usuario;
        this.nombre_Final_de_Usuario = nombre_Final_de_Usuario;

        initComponents();
         Image icono = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenesG/buhoAzul.png"));
        setIconImage(icono);
        //   setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setResizable(false);
        this.setLocationRelativeTo(null);

   

        modeloLista1 = new DefaultListModel();
        modeloLista1.addElement("ID LIBRO");
        modeloLista1.addElement("NOMBRE DEL LIBRO");
        modeloLista1.addElement("AUTOR");
        modeloLista1.addElement("EDICION");
        modeloLista1.addElement("EDITORIAL");
        modeloLista1.addElement("ISBN");
        modeloLista1.addElement("PRECIO");
        modeloLista1.addElement("CLASIFICACION");
        modeloLista1.addElement("CATEGORIA");
        lista1.setModel(modeloLista1);

        modeloLista2 = new DefaultListModel();
        lista2.setModel(modeloLista2);

        modelo3 = new DefaultComboBoxModel();
        modelo3.addElement("Seleccionar por");
        cbxOrdenar_por.setModel(modelo3);

    }
    DefaultTableModel modelo;
    DefaultListModel modeloLista1;
    DefaultListModel modeloLista2;
    DefaultComboBoxModel modelo3;
    DefaultListModel modeloLista4;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lista1 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lista2 = new javax.swing.JList<>();
        cbxOrdenar_por = new javax.swing.JComboBox<>();
        cbxDESC = new javax.swing.JComboBox<>();
        btnQuitar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rSButton1 = new rojeru_san.RSButton();
        rSButton2 = new rojeru_san.RSButton();
        rSButton3 = new rojeru_san.RSButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtablaUsuarios = new rojerusan.RSTableMetro();
        jLabel9 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtBuscarClave = new rojeru_san.RSMTextFull();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1260, 730));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lista1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lista1.setSelectionBackground(new java.awt.Color(204, 204, 204));
        lista1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        lista1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lista1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lista1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 170, 170));

        lista2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lista2.setSelectionBackground(new java.awt.Color(204, 204, 204));
        lista2.setSelectionForeground(new java.awt.Color(0, 0, 0));
        lista2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lista2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lista2);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 120, 170, 170));

        cbxOrdenar_por.setBackground(new java.awt.Color(0, 51, 153));
        cbxOrdenar_por.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbxOrdenar_por.setOpaque(false);
        cbxOrdenar_por.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cbxOrdenar_porActionPerformed(evt);
            }
        });
        jPanel1.add(cbxOrdenar_por, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 150, 150, -1));

        cbxDESC.setBackground(new java.awt.Color(0, 51, 153));
        cbxDESC.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbxDESC.setForeground(new java.awt.Color(255, 255, 255));
        cbxDESC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ASCENDENTE", "DESCENDENTE" }));
        cbxDESC.setOpaque(false);
        jPanel1.add(cbxDESC, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 230, 150, -1));

        btnQuitar.setBackground(new java.awt.Color(204, 204, 204));
        btnQuitar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenesG/118774 - go previous.png"))); // NOI18N
        btnQuitar.setText("Quitar");
        btnQuitar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnQuitarActionPerformed(evt);
            }
        });
        jPanel1.add(btnQuitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, 120, 30));

        btnAgregar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenesG/118773 - go next.png"))); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 140, 120, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Ordenar por:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 120, 90, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("De manera:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 200, 90, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("CONSULTA PERSONALIZADA");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 400, 60));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Buscar por nombre del Libro:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 160, 230, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 153, 153));
        jLabel6.setText("*VISTA PRETERMINADA");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 90, 210, 30));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Elementos del libro");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 170, 40));

        rSButton1.setBackground(new java.awt.Color(0, 51, 102));
        rSButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenesG/118917 - clear edit.png"))); // NOI18N
        rSButton1.setText("Limpiar");
        rSButton1.setColorHover(new java.awt.Color(0, 102, 255));
        rSButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rSButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 150, 200, -1));

        rSButton2.setBackground(new java.awt.Color(0, 51, 102));
        rSButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_Login_24px.png"))); // NOI18N
        rSButton2.setText("Regresar");
        rSButton2.setColorHover(new java.awt.Color(0, 102, 255));
        rSButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rSButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 90, 200, -1));

        rSButton3.setBackground(new java.awt.Color(0, 51, 102));
        rSButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8_Search_36px_1.png"))); // NOI18N
        rSButton3.setText("Realizar consulta");
        rSButton3.setColorHover(new java.awt.Color(0, 102, 255));
        rSButton3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rSButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 210, 200, -1));

        jtablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Nombre del libro", "Autor", "Precio", "Stock", "Descripción", "Portada"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jtablaUsuarios.setColorBackgoundHead(new java.awt.Color(0, 51, 102));
        jtablaUsuarios.setColorBordeFilas(new java.awt.Color(204, 204, 204));
        jtablaUsuarios.setColorBordeHead(new java.awt.Color(204, 204, 204));
        jtablaUsuarios.setColorFilasForeground1(new java.awt.Color(0, 0, 51));
        jtablaUsuarios.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        jtablaUsuarios.setFuenteHead(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jScrollPane4.setViewportView(jtablaUsuarios);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 1200, 230));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Elementos del libro");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 80, 170, 40));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 51));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 90, 30, 200));

        txtBuscarClave.setForeground(new java.awt.Color(0, 51, 102));
        txtBuscarClave.setBordeColorFocus(new java.awt.Color(0, 51, 102));
        txtBuscarClave.setBotonColor(new java.awt.Color(0, 51, 102));
        txtBuscarClave.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtBuscarClave.setOpaque(false);
        txtBuscarClave.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                txtBuscarClaveKeyReleased(evt);
            }
        });
        jPanel1.add(txtBuscarClave, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 200, 210, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 560));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lista2MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lista2MouseClicked
    {//GEN-HEADEREND:event_lista2MouseClicked
        btnQuitar.setEnabled(true);
        btnAgregar.setEnabled(false);
    }//GEN-LAST:event_lista2MouseClicked

    private void cbxOrdenar_porActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cbxOrdenar_porActionPerformed
    {//GEN-HEADEREND:event_cbxOrdenar_porActionPerformed

    }//GEN-LAST:event_cbxOrdenar_porActionPerformed

    private void boton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_boton1ActionPerformed
    {//GEN-HEADEREND:event_boton1ActionPerformed

    }//GEN-LAST:event_boton1ActionPerformed

    private void boton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_boton2ActionPerformed
    {//GEN-HEADEREND:event_boton2ActionPerformed


    }//GEN-LAST:event_boton2ActionPerformed
    public void btnMuestra()
    {

        int tE = modeloLista2.getSize();
        if (tE == 0)
        {
            mostrarDatos(txtBuscarClave.getText().toUpperCase().trim());
        } else
        {
            if (cbxOrdenar_por.getSelectedItem().equals("Seleccionar por"))
            {
                int tElementos = modeloLista2.getSize();

                String[] elementosT = new String[tElementos];
                for (int i = 0; i < tElementos; i++)
                {
                    elementosT[i] = (String) modeloLista2.getElementAt(i);
                }
                muestraConsultaPersonalizada(elementosT);
            } else
            {
                int tElementos = modeloLista2.getSize();
                String[] elementosT = new String[tElementos];
                for (int i = 0; i < tElementos; i++)
                {
                    elementosT[i] = (String) modeloLista2.getElementAt(i);
                }
                String ordenarPor = modelo3.getElementAt(cbxOrdenar_por.getSelectedIndex()).toString();
                if ("ID LIBRO".equals(ordenarPor))
                {
                    ordenarPor = "id_libro";
                }
                if ("NOMBRE DEL LIBRO".equals(ordenarPor))
                {
                    ordenarPor = "nombre_libro";
                }
                if ("AUTOR".equals(ordenarPor))
                {
                    ordenarPor = "autor_libro";
                }
                if ("PRECIO".equals(ordenarPor))
                {
                    ordenarPor = "precio_libro";
                }
                if ("EDICION".equals(ordenarPor))
                {
                    ordenarPor = "edicion_libro";
                }
                if ("ISBN".equals(ordenarPor))
                {
                    ordenarPor = "ISBN";
                }
                if ("EDITORIAL".equals(ordenarPor))
                {
                    ordenarPor = "editorial_libro";
                }
                if ("CLASIFICACION".equals(ordenarPor))
                {
                    ordenarPor = "nombre_clasificacion";
                }
                if ("CATEGORIA".equals(ordenarPor))
                {
                    ordenarPor = "nombre_categoria";
                }
                if (cbxDESC.getSelectedItem().equals("ASCENDENTE"))
                {

                    muestraConsultaPersonalizadaConOrdenPor(elementosT, ordenarPor, "ASCENDENTE");
                } else
                {

                    muestraConsultaPersonalizadaConOrdenPor(elementosT, ordenarPor, "DESCENDENTE");
                }

            }
        }
    }
    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnQuitarActionPerformed
    {//GEN-HEADEREND:event_btnQuitarActionPerformed

        if (lista2.getSelectedIndex() == -1)
        {
            //mensaje
        } else
        {
            String s = lista2.getSelectedValue();

            modeloLista2.removeElementAt(lista2.getSelectedIndex());
            modeloLista1.addElement(s);
            modelo3.removeElement(s);
        }
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAgregarActionPerformed
    {//GEN-HEADEREND:event_btnAgregarActionPerformed
        if (lista1.getSelectedIndex() == -1)
        {
            //mesaje de que seleciones
        } else
        {
            String s = lista1.getSelectedValue();
            modeloLista1.removeElementAt(lista1.getSelectedIndex());
            modeloLista2.addElement(s);
            modelo3.addElement(s);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void lista1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lista1MouseClicked
    {//GEN-HEADEREND:event_lista1MouseClicked
        btnQuitar.setEnabled(false);
        btnAgregar.setEnabled(true);
    }//GEN-LAST:event_lista1MouseClicked

    private void rSButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rSButton3ActionPerformed
    {//GEN-HEADEREND:event_rSButton3ActionPerformed
        btnMuestra();
    }//GEN-LAST:event_rSButton3ActionPerformed

    private void rSButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rSButton1ActionPerformed
    {//GEN-HEADEREND:event_rSButton1ActionPerformed

        modeloLista1 = new DefaultListModel();
        modeloLista1.addElement("ID LIBRO");
        modeloLista1.addElement("NOMBRE DEL LIBRO");
        modeloLista1.addElement("AUTOR");
        modeloLista1.addElement("EDICION");
        modeloLista1.addElement("EDITORIAL");
        modeloLista1.addElement("ISBN");
        modeloLista1.addElement("CANTIDAD");
        lista1.setModel(modeloLista1);

        modeloLista2 = new DefaultListModel();
        lista2.setModel(modeloLista2);

        modelo3 = new DefaultComboBoxModel();
        modelo3.addElement("Seleccionar por");
        cbxOrdenar_por.setModel(modelo3);
    }//GEN-LAST:event_rSButton1ActionPerformed

    private void rSButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rSButton2ActionPerformed
    {//GEN-HEADEREND:event_rSButton2ActionPerformed
        CtrComponentes.botonSalirSI(this, nombre_Final_de_Usuario, pantallas_Usuario);
    }//GEN-LAST:event_rSButton2ActionPerformed

    private void txtBuscarClaveKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtBuscarClaveKeyReleased
    {//GEN-HEADEREND:event_txtBuscarClaveKeyReleased
        mostrarDatos(txtBuscarClave.getText().trim());
    }//GEN-LAST:event_txtBuscarClaveKeyReleased
    void mostrarDatos(String clave)
    {

        modelo = new DefaultTableModel();

        modelo.addColumn("ID LIBRO");
        modelo.addColumn("NOMBRE");
        modelo.addColumn("AUTOR");
        modelo.addColumn("EDICION");
        modelo.addColumn("EDITORIAL");
        modelo.addColumn("PRECIO");
        modelo.addColumn("ISBN");
        modelo.addColumn("PORTADA");
        jtablaUsuarios.setDefaultRenderer(Object.class, new Tabla());
        jtablaUsuarios.setModel(modelo);
        jtablaUsuarios.setEnabled(false);
        String sql = "";
        if (clave.equals(""))
        {
            sql = "SELECT * FROM t_libros";
        } else
        {

            sql = "SELECT * FROM t_libro WHERE nombre_libro like '" + clave + "%'";

        }

        Object datos[] = new Object[8];
        Statement st;
        Conexion.con = Conexion.getConexion();
        try
        {
            st = Conexion.con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next())
            {
                datos[0] = rs.getString("id_libro");
                datos[1] = rs.getString("nombre_libro");
                datos[2] = rs.getString("autor_libro");
                datos[3] = rs.getString("edicion_libro");
                datos[4] = rs.getString("editorial_libro");
                datos[5] = rs.getString("precio_libro");
                datos[6] = rs.getString("ISBN");

                Blob blob = rs.getBlob("portada");
                byte[] data = blob.getBytes(1, (int) blob.length());
                BufferedImage img = null;
                try
                {
                    img = ImageIO.read(new ByteArrayInputStream(data));
                } catch (Exception e)
                {
                }
                ImageIcon icono = new ImageIcon(img);
                JLabel u = new JLabel();
                u.setIcon(new ImageIcon(icono.getImage()
                        .getScaledInstance(80, 100, Image.SCALE_SMOOTH)));

                datos[7] = u;

                modelo.addRow(datos);
            }
            jtablaUsuarios.setModel(modelo);
            jtablaUsuarios.setRowHeight(110);
        } catch (Exception e)
        {
        }

    }
    // int anchos[]={10,250,250,25};
    // for (int x = 0; x < jTablaUsuarios.getColumnCount(); x++)
    // {
    // jTablaUsuarios.getColumnModel().getColumn(x).setPreferredWidth(anchos[x]);
    //}

    public void muestraConsultaPersonalizada(String camposT[])
    {
        try
        {
            modelo = new DefaultTableModel();
            String sql = "SELECT * FROM t_libro";
            Statement st;
            Conexion.con = Conexion.getConexion();
            st = Conexion.con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next())
            {
                Conexion.con = Conexion.getConexion();
                st = Conexion.con.createStatement();
                rs = st.executeQuery(sql);
                ingresaCamposT(0, rs, camposT, "");
            }

        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "error PERSONALIZADA");
        } finally
        {
            try
            {
                Conexion.con.close();
            } catch (SQLException ex)
            {
                Logger.getLogger(VtnRegistroCategorias.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void muestraConsultaPersonalizadaConOrdenPor(String camposT[], String ordenarPor, String desde)
    {
        if (desde.equals("ASCENDENTE"))
        {
            try
            {

                modelo = new DefaultTableModel();
                String sql = "SELECT * FROM t_libro order by " + ordenarPor + "";
                Statement st;
                Conexion.con = Conexion.getConexion();
                st = Conexion.con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next())
                {
                    Conexion.con = Conexion.getConexion();
                    st = Conexion.con.createStatement();
                    rs = st.executeQuery(sql);
                    ingresaCamposT(0, rs, camposT, ordenarPor);
                }

            } catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, "error ORDEN ASCENDENTE");
            } finally
            {
                try
                {
                    Conexion.con.close();
                } catch (SQLException ex)
                {
                    Logger.getLogger(VtnRegistroCategorias.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else
        {
            try
            {

                modelo = new DefaultTableModel();
                String sql = "SELECT * FROM t_libro order by " + ordenarPor + " DESC";
                Statement st;
                Conexion.con = Conexion.getConexion();
                st = Conexion.con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next())
                {
                    Conexion.con = Conexion.getConexion();
                    st = Conexion.con.createStatement();
                    rs = st.executeQuery(sql);
                    ingresaCamposT(1, rs, camposT, ordenarPor);
                }

            } catch (Exception e)
            {
                JOptionPane.showMessageDialog(null, "error ORDEN DESCENDENTE");
            } finally
            {
                try
                {
                    Conexion.con.close();
                } catch (SQLException ex)
                {
                    Logger.getLogger(VtnRegistroCategorias.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }

    public void ingresaCamposT(int i, ResultSet rs, String campos[], String orden)
    {

        try
        {

            for (int j = 0; j < campos.length; j++)
            {
                modelo.addColumn(campos[j]);

            }
            jtablaUsuarios.setModel(modelo);

            String camposSQL[] = new String[campos.length];

            for (int j = 0; j < campos.length; j++)
            {
                if ("ID LIBRO".equals(campos[j]))
                {
                    camposSQL[j] = "id_libro";
                }
                if ("NOMBRE DEL LIBRO".equals(campos[j]))
                {
                    camposSQL[j] = "nombre_libro";
                }
                if ("AUTOR".equals(campos[j]))
                {
                    camposSQL[j] = "autor_libro";
                }
                if ("PRECIO".equals(campos[j]))
                {
                    camposSQL[j] = "precio_libro";
                }
                if ("EDICION".equals(campos[j]))
                {
                    camposSQL[j] = "edicion_libro";
                }
                if ("ISBN".equals(campos[j]))
                {
                    camposSQL[j] = "ISBN";
                }
                if ("EDITORIAL".equals(campos[j]))
                {
                    camposSQL[j] = "editorial_libro";
                }
                if ("CLASIFICACION".equals(campos[j]))
                {
                    camposSQL[j] = "nombre_clasificacion";
                }
                if ("CATEGORIA".equals(campos[j]))
                {
                    camposSQL[j] = "nombre_categoria";
                }

            }
            String datos[] = new String[campos.length];

            int index = 0;
            while (rs.next())
            {
                for (int j = 0; j < campos.length; j++)
                {
                    try
                    {
                        datos[index] = rs.getString(camposSQL[j]);
                        index++;
                    } catch (SQLException ex)
                    {
                        Logger.getLogger(VtnLibrerias.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                modelo.addRow(datos);
                jtablaUsuarios.setModel(modelo);
                index = 0;
            }

        } catch (SQLException ex)
        {
            Logger.getLogger(VtnLibrerias.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JComboBox<String> cbxDESC;
    private javax.swing.JComboBox<String> cbxOrdenar_por;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private rojerusan.RSTableMetro jtablaUsuarios;
    private javax.swing.JList<String> lista1;
    private javax.swing.JList<String> lista2;
    private rojeru_san.RSButton rSButton1;
    private rojeru_san.RSButton rSButton2;
    private rojeru_san.RSButton rSButton3;
    private rojeru_san.RSMTextFull txtBuscarClave;
    // End of variables declaration//GEN-END:variables
}
